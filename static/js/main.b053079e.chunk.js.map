{"version":3,"sources":["components/Home.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","backgroundColor","paper","padding","spacing","textAlign","color","palette","text","secondary","Home","props","id","useParams","classes","useTheme","useMediaQuery","breakpoints","up","useState","arrayOfColors","setArrayOfColors","snackBarOpen","setSnackBarOpen","handleClose","event","reason","useEffect","arrayOfColor","split","map","filter","colorToAdd","replace","test","className","Typography","style","fontSize","fontWeight","Grid","container","justify","alignItems","alignContent","item","xs","sm","lg","width","height","src","frameborder","allow","allowfullscreen","Paper","Button","onClick","copy","variant","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","message","action","Fragment","IconButton","size","aria-label","App","path","VideoPage","useRouteMatch","url","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b053079e.chunk.js","sourcesContent":["import { Button, Grid, IconButton, makeStyles, Paper, Snackbar, Typography, useMediaQuery, useTheme } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport copy from 'copy-to-clipboard';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport 'fontsource-roboto';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link, \r\n  useParams\r\n} from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n      backgroundColor: 'rgba(209, 209, 209, 0.32)',\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(2),\r\n      textAlign: 'center',\r\n      color: theme.palette.text.secondary,\r\n    },\r\n  }));\r\n  \r\n\r\nexport default function Home(props) {\r\n    let { id } = useParams();\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const matches = useMediaQuery(theme.breakpoints.up('lg'));\r\n  \r\n    const [arrayOfColors, setArrayOfColors] = useState([])\r\n  \r\n    const [snackBarOpen, setSnackBarOpen] = useState(false)\r\n  \r\n    const handleClick = () => {\r\n      setSnackBarOpen(true)\r\n    }\r\n  \r\n    const handleClose = (event, reason) => {\r\n      if (reason === 'clickaway') {\r\n        return;\r\n      }\r\n  \r\n      setSnackBarOpen(false);\r\n    };\r\n  \r\n    useEffect(() => {\r\n      var arrayOfColor = id.split(',');\r\n      arrayOfColor = arrayOfColor.map((color) => {\r\n        return '#'+color\r\n      })\r\n      arrayOfColor.filter(color => {\r\n            var colorToAdd = color.replace(/\\s+/g,'') ;\r\n            return (/^#([0-9A-F]{3}){1,2}$/i.test(colorToAdd)) \r\n          }\r\n      )\r\n      setArrayOfColors([...arrayOfColor])\r\n    }, [id])\r\n  \r\n    return (\r\n        <div className={classes.root}>\r\n        <Typography style={{textAlign: 'center', color: 'white', fontSize: 25, fontWeight: 35, padding: 35, backgroundColor: '#2196f3'}} >\r\n            Make sure to subscribe\r\n        </Typography>\r\n        <Grid container justify=\"center\" alignItems=\"center\" alignContent=\"center\" >\r\n            <Grid item xs={12} sm={12} lg={12} justify=\"center\" alignItems=\"center\" alignContent=\"center\"  >\r\n                <iframe style={{width: '100%', height: 350}} src={\"https://www.youtube.com/embed/\" + props.id} frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"true\"></iframe>\r\n            </Grid>\r\n        </Grid>\r\n      <Grid container justify=\"center\" alignItems=\"center\" alignContent=\"center\" >\r\n        {\r\n          arrayOfColors.map(item => (\r\n            <Grid item xs={12} sm={12} lg={3} >\r\n              <Paper className={classes.paper} style={{backgroundColor: item}} >\r\n                <Button onClick={() => {\r\n                  setSnackBarOpen(true)\r\n                  copy(item)\r\n                }} variant=\"contained\">\r\n                    <Typography>\r\n                        {item}\r\n                    </Typography>\r\n                </Button>\r\n              </Paper>\r\n            </Grid>\r\n        ))\r\n        }\r\n        </Grid>\r\n        <Snackbar\r\n        anchorOrigin={{\r\n          vertical: 'bottom',\r\n          horizontal: 'left',\r\n        }}\r\n        open={snackBarOpen}\r\n        autoHideDuration={500}\r\n        onClose={handleClose}\r\n        message=\"Copied to clipboard\"\r\n        action={\r\n          <React.Fragment>\r\n            <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleClose}>\r\n              <CloseIcon fontSize=\"small\" />\r\n            </IconButton>\r\n          </React.Fragment>\r\n        }\r\n      />\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  ","import { Button, Grid, IconButton, makeStyles, Paper, Snackbar, Typography } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport copy from 'copy-to-clipboard';\nimport CloseIcon from '@material-ui/icons/Close';\nimport 'fontsource-roboto';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  HashRouter,\n  Link,\n  useParams,\n  useRouteMatch\n} from \"react-router-dom\";\nimport Home from './components/Home'\n\nexport default function App() {\n  return (\n    <HashRouter>\n\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/:id\">\n            <VideoPage/>\n          </Route>\n        </Switch>\n    </HashRouter>\n  );\n}\n\nfunction VideoPage() {\n  let { path, url } = useRouteMatch();\n  let {id} = useParams();\n  return (\n    <React.Fragment>\n      <Switch>\n        <Route exact path={`${path}/:id`} >\n          <Home id={id} />\n        </Route>\n      </Switch>\n    </React.Fragment>\n  )\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}